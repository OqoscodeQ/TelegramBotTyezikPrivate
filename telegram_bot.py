import logging
import os
import signal
import asyncio
import random
import sqlite3
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, ContextTypes, filters
from telegram.error import TelegramError, Conflict
from flask import Flask

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ —Ç–≤–æ–π username –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
TOKEN = os.getenv("TOKEN", "7996047867:AAG0diMuw5uhqGUVSYNcUPAst8hm2R_G47Q")
ADMIN_USERNAME = "@Tyezik"  # –¢–≤–æ–π username –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

# –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
PRODUCTS = [
    {"name": "–ë—É—Å—Ç –º–∞–∫—Å —Ä–∞–Ω–≥–∞", "price": "200 —Ä—É–±", "image": "https://i.imgur.com/5KqL9vZ.jpg"},
    {"name": "–ë—É—Å—Ç –º–∏—Ñ–∏–∫ –ª–∏–≥–∏", "price": "200 —Ä—É–±", "image": "https://i.imgur.com/5KqL9vZ.jpg"},
    {"name": "–ë—É—Å—Ç –∫—É–±–∫–∏ –æ—Ç 0 –¥–æ 500 –∏ –æ—Ç 500 –¥–æ 1000 –∫—É–±–∫–æ–≤", "price": "–æ—Ç 100 —Ä—É–±–ª–µ–π –¥–æ 150 —Ä—É–±–ª–µ–π (—Ü–µ–Ω–∞ –¥–æ–≥–æ–≤–æ—Ä–Ω–∞—è)",
     "image": "https://i.imgur.com/9vJ1R2L.jpg"},
    {"name": "–ë—É—Å—Ç –∫–≤–µ—Å—Ç–æ–≤", "price": "150 —Ä—É–±", "image": "https://i.imgur.com/8n7mY4h.jpg"},
    {"name": "–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–≤–æ—é —É—Å–ª—É–≥—É", "price": "—Ü–µ–Ω—É –æ–±–≥–æ–≤–æ—Ä–∏–º", "image": "https://i.imgur.com/x7p3Z0P.jpg"}
]

# –õ–æ–≥–∏ –∏ –ª–∏–≥–∏
LEAGUES = ["–ë—Ä–æ–Ω–∑–∞", "–°–µ—Ä–µ–±—Ä–æ", "–ó–æ–ª–æ—Ç–æ", "–ê–ª–º–∞–∑", "–ú–∏—Ñ–∏–∫"]
COMMENTS = {
    "win": ["–û—Ç–ª–∏—á–Ω–∞—è –∏–Ω—Ç—É–∏—Ü–∏—è! üéâ –¢—ã —É–≥–∞–¥–∞–ª –ª–∏–≥—É!", "–¢—ã –º–∞—Å—Ç–µ—Ä –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π! üí™", "–ü–æ—Ç—Ä—è—Å–∞—é—â–µ! –¢—ã –ø–æ–ø–∞–ª –≤ —Ü–µ–ª—å! üòé"],
    "lose": ["–£–≤—ã, –Ω–µ —É–≥–∞–¥–∞–ª! üòÇ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É —Ç–µ–±—è –±—ã–ª–∞ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞!", "–ü–æ—á—Ç–∏ –ø–æ–ª—É—á–∏–ª–æ—Å—å! üòÖ –ù–æ —É —Ç–µ–±—è –±—ã–ª–∞ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞!",
             "–ù–µ –ø–æ–≤–µ–∑–ª–æ –Ω–∞ —ç—Ç–æ—Ç —Ä–∞–∑! –£ —Ç–µ–±—è –±—ã–ª–∞ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞!"]
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Flask
app = Flask(__name__)

@app.route('/')
def health_check():
    return "Bot is running", 200

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('bot_data.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS users 
                 (username TEXT PRIMARY KEY, played INTEGER, wins INTEGER, invites INTEGER, subscribed INTEGER)''')
    c.execute('''CREATE TABLE IF NOT EXISTS leaderboard 
                 (username TEXT PRIMARY KEY, score INTEGER)''')
    c.execute('''CREATE TABLE IF NOT EXISTS achievements 
                 (username TEXT, achievement TEXT, PRIMARY KEY (username, achievement))''')
    conn.commit()
    conn.close()

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def update_user(context, user_id, username, played=False, win=False, invite=False, subscribe=False):
    conn = sqlite3.connect('bot_data.db')
    c = conn.cursor()
    c.execute("INSERT OR IGNORE INTO users (username, played, wins, invites, subscribed) VALUES (?, 0, 0, 0, 0)",
              (username,))
    if played:
        c.execute("UPDATE users SET played = 1 WHERE username = ?", (username,))
    if win:
        c.execute("UPDATE users SET wins = wins + 1 WHERE username = ?", (username,))
    if invite:
        c.execute("UPDATE users SET invites = invites + 1 WHERE username = ?", (username,))
    if subscribe:
        c.execute("UPDATE users SET subscribed = 1 WHERE username = ?", (username,))
    conn.commit()
    conn.close()

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞
def update_leaderboard(context, username, score):
    conn = sqlite3.connect('bot_data.db')
    c = conn.cursor()
    c.execute("INSERT OR REPLACE INTO leaderboard (username, score) VALUES (?, ?)", (username, score))
    conn.commit()
    conn.close()

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞—á–∏–≤–∫–∏
def add_achievement(context, username, achievement):
    conn = sqlite3.connect('bot_data.db')
    c = conn.cursor()
    c.execute("INSERT OR IGNORE INTO achievements (username, achievement) VALUES (?, ?)", (username, achievement))
    conn.commit()
    conn.close()

# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
async def notify_admin(context, message):
    try:
        await context.bot.send_message(chat_id=ADMIN_USERNAME, text=message)
    except TelegramError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    keyboard = [[InlineKeyboardButton("–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤", callback_data='catalog')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    welcome_message = (
        "–ü—Ä–∏–≤–µ—Ç! –¢—ã –ø–æ–ø–∞–ª –≤ –º–æ–µ–≥–æ –±–æ—Ç–∞! üòé\n"
        "–í —ç—Ç–æ–º –±–æ—Ç–µ —Ç—ã –º–æ–∂–µ—à—å –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –º–æ–∏–º–∏ —É—Å–ª—É–≥–∞–º–∏.\n"
        "–í—Å–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç —Å—Ç—Ä–æ–≥–æ –ª–∏—á–Ω–æ —á–µ—Ä–µ–∑ –º–µ–Ω—è.\n"
        "–ù–∞–ø–∏—à–∏ –º–Ω–µ, –µ—Å–ª–∏ —Ç–µ–±–µ —á—Ç–æ-—Ç–æ –ø—Ä–∏–≥–ª—è–Ω–µ—Ç—Å—è!"
    )
    await update.message.reply_text(welcome_message, reply_markup=reply_markup)
    logger.info("–ö–æ–º–∞–Ω–¥–∞ /start –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    logger.info(f"–ü–æ–ª—É—á–µ–Ω callback: {query.data}")

    try:
        if query.data == 'catalog':
            await query.message.reply_text("üìã –ú–æ–∏ —É—Å–ª—É–≥–∏:")
            for i, product in enumerate(PRODUCTS, 1):
                message = f"{i}. {product['name']} - {product['price']}"
                keyboard = [[InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å", callback_data=f"product_{i}")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                try:
                    await query.message.reply_photo(photo=product['image'], caption=message, reply_markup=reply_markup)
                except TelegramError as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ –¥–ª—è {product['name']}: {e}")
                    await query.message.reply_text(message, reply_markup=reply_markup)

        elif query.data.startswith('product_'):
            product_index = int(query.data.split('_')[1]) - 1
            if 0 <= product_index < len(PRODUCTS):
                product = PRODUCTS[product_index]
                user = query.from_user
                username = user.username if user.username else str(user.id)
                requisites_message = (
                    f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {product['name']} - {product['price']}\n\n"
                    "–†–µ–∫–≤–∏–∑–∏—Ç—ã:\n"
                    f"{ADMIN_USERNAME} (–ø–∏—à–∏—Ç–µ —Ç–æ–ª—å–∫–æ –ø–æ –¥–µ–ª—É, –ø—Ä–æ—à—É –Ω–µ —Å–ø–∞–º–∏—Ç—å, –º–æ–≥—É –Ω–µ –æ—Ç–≤–µ—á–∞—Ç—å)\n"
                    "–°—Å—ã–ª–∫–∞ –Ω–∞ FunPay: https://funpay.com/users/15119175\n"
                    "–°—Å—ã–ª–∫–∞ –Ω–∞ https://www.donationalerts.com/r/makarovbyshop\n"
                    "(–ø—Ä–æ—à—É –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç–æ—á–Ω—É—é —Å—É–º–º—É –∏ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ—è—Å–Ω–∏—Ç–µ –∑–∞ —á—Ç–æ –ø–ª–∞—Ç–∏—Ç–µ, "
                    "—Ç–∞–∫–∂–µ –Ω–µ –æ–ø–ª–∞—á–∏–≤–∞–π—Ç–µ —Å—Ä–∞–∑—É, —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Å–æ –º–Ω–æ–π)\n"
                    "–¢–∞–∫–∂–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –≤–µ—Ä–Ω—É –¥–µ–Ω—å–≥–∏, –µ—Å–ª–∏ –Ω–µ —Å–º–æ–≥—É –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–∫–∞–∑\n\n"
                    "–•–æ—á–µ—à—å –≤—ã–∏–≥—Ä–∞—Ç—å —Å–∫–∏–¥–∫—É? –í–≤–µ–¥–∏ /start_rang –∏ —Å—ã–≥—Ä–∞–π –≤ '–£–≥–∞–¥–∞–π –ª–∏–≥—É'!"
                )
                await query.message.reply_text(requisites_message)
                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ –Ω–∞–º–µ—Ä–µ–Ω–∏–∏ –ø–æ–∫—É–ø–∫–∏
                await notify_admin(context, f"üîî –ù–æ–≤—ã–π –∑–∞–∫–∞–∑! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –≤—ã–±—Ä–∞–ª: {product['name']} - {product['price']}. –ü—Ä–æ–≤–µ—Ä—å!")
                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É –æ –≤—ã–±–æ—Ä–µ {product['name']} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {username}")
            else:
                await query.message.reply_text("–û—à–∏–±–∫–∞: –≤—ã–±—Ä–∞–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä.")
                logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–Ω–¥–µ–∫—Å –ø—Ä–æ–¥—É–∫—Ç–∞: {product_index}")

    except TelegramError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API: {e}")
        await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await notify_admin(context, f"Telegram API Error: {e}")

async def start_rang(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    username = update.effective_user.username if update.effective_user.username else str(user_id)
    if context.user_data.get(f'played_{username}'):
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –≤—ã —É–∂–µ –ø—ã—Ç–∞–ª–∏ —É–¥–∞—á—É! –£ –≤–∞—Å –±—ã–ª–∞ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞.")
        return
    context.user_data['correct_league'] = random.choice(LEAGUES)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç –¥–∞–≤–∞–π —Å—ã–≥—Ä–∞–µ–º –≤ –∏–≥—Ä—É —É–≥–∞–¥–∞–π –ª–∏–≥—É, —Ç—ã –¥–æ–ª–∂–µ–Ω —É–≥–∞–¥–∞—Ç—å –ª–∏–≥—É –∫–æ—Ç–æ—Ä—É—é —è –∑–∞–≥–∞–¥–∞—é –∏ –ø–æ–ª—É—á–∏—à—å —Å–∫–∏–¥–∫—É, "
        "–Ω–∞–ø–∏—à–∏ —Å–≤–æ—é –¥–æ–≥–∞–¥–∫—É –∏ –ø–æ–ª—É—á–∏ —Å–∫–∏–¥–∫—É! (–í–∞—Ä–∏–∞–Ω—Ç—ã: –ë—Ä–æ–Ω–∑–∞, –°–µ—Ä–µ–±—Ä–æ, –ó–æ–ª–æ—Ç–æ, –ê–ª–º–∞–∑, –ú–∏—Ñ–∏–∫) "
        "–£ —Ç–µ–±—è —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞!"
    )
    context.user_data['game_active'] = True
    logger.info(f"–ò–≥—Ä–∞ '–£–≥–∞–¥–∞–π –ª–∏–≥—É' –Ω–∞—á–∞—Ç–∞ –¥–ª—è {username}. –ó–∞–≥–∞–¥–∞–Ω–∞ –ª–∏–≥–∞: {context.user_data['correct_league']}")

async def handle_guess(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if context.user_data.get('game_active'):
        user_id = update.effective_user.id
        username = update.effective_user.username if update.effective_user.username else str(user_id)
        user_guess = update.message.text.strip().capitalize()
        correct_league = context.user_data['correct_league']
        result = user_guess == correct_league
        discount_message = ""
        if result:
            token_number = random.randint(1000, 9999)
            discount_token = f"Token-{token_number} 5%"
            discount_message = f"\nüéÅ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã —É–≥–∞–¥–∞–ª –∏ –ø–æ–ª—É—á–∏–ª 5% —Å–∫–∏–¥–∫—É! –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–∫–µ–Ω: {discount_token} –ø—Ä–∏ –∑–∞–∫–∞–∑–µ!"
            update_user(context, user_id, username, played=True, win=True)
            update_leaderboard(context, username, 1)
            add_achievement(context, username, "First Win")
        else:
            update_user(context, user_id, username, played=True)
        response = (
            f"–¢–≤–æ–π –æ—Ç–≤–µ—Ç: {user_guess}\n"
            f"–ó–∞–≥–∞–¥–∞–Ω–Ω–∞—è –ª–∏–≥–∞: {correct_league}\n"
            f"{random.choice(COMMENTS['win']) if result else random.choice(COMMENTS['lose'])}"
            f"{discount_message}"
        )
        await update.message.reply_text(response)
        context.user_data['game_active'] = False
        context.user_data[f'played_{username}'] = True
        logger.info(f"–ò–≥—Ä–∞ '–£–≥–∞–¥–∞–π –ª–∏–≥—É' –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è {username}. –£–≥–∞–¥–∞–ª: {result}, –¢–æ–∫–µ–Ω: {discount_message}")
    else:
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –≤—ã —É–∂–µ –ø—ã—Ç–∞–ª–∏ —É–¥–∞—á—É! –£ –≤–∞—Å –±—ã–ª–∞ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞.")

# –ù–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–ª–∞—Ç–µ–∂–µ
async def paid(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    username = update.effective_user.username if update.effective_user.username else str(user_id)
    if context.args:
        product = " ".join(context.args)
        await notify_admin(context, f"üí∞ –ü–ª–∞—Ç—ë–∂! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —Å–æ–æ–±—â–∞–µ—Ç –æ–± –æ–ø–ª–∞—Ç–µ –∑–∞: {product}. –ü—Ä–æ–≤–µ—Ä—å –Ω–∞ FunPay –∏–ª–∏ DonationAlerts!")
        await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–æ–¥–∞–≤—Ü—É. –û–∂–∏–¥–∞–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
    else:
        await update.message.reply_text("–£–∫–∞–∂–∏ —Ç–æ–≤–∞—Ä –ø–æ—Å–ª–µ /paid (–Ω–∞–ø—Ä–∏–º–µ—Ä, /paid –ë—É—Å—Ç –º–∞–∫—Å —Ä–∞–Ω–≥–∞).")
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /paid –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –¥–ª—è {username}")

# –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def leaderboard(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    conn = sqlite3.connect('bot_data.db')
    c = conn.cursor()
    c.execute("SELECT username, score FROM leaderboard ORDER BY score DESC LIMIT 5")
    leaders = c.fetchall()
    conn.close()
    if leaders:
        msg = "üèÜ –¢–æ–ø-5 –ª–∏–¥–µ—Ä–æ–≤:\n" + "\n".join([f"{i}. {u[0]}: {u[1]} –æ—á–∫–æ–≤" for i, u in enumerate(leaders, 1)])
    else:
        msg = "–õ–∏–¥–µ—Ä–±–æ—Ä–¥ –ø–æ–∫–∞ –ø—É—Å—Ç!"
    await update.message.reply_text(msg)
    logger.info("–ö–æ–º–∞–Ω–¥–∞ /leaderboard –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")

async def hint(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if context.user_data.get('game_active'):
        user_id = update.effective_user.id
        username = update.effective_user.username if update.effective_user.username else str(user_id)
        correct_league = context.user_data['correct_league']
        hint = f"–ü–æ–¥—Å–∫–∞–∑–∫–∞: –ª–∏–≥–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–∞ '{correct_league[0]}'. –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏: 50 —Ä—É–± (–æ–ø–ª–∞—Ç–∏ —á–µ—Ä–µ–∑ https://funpay.com/users/15119175)!"
        await update.message.reply_text(hint)
        logger.info(f"–ü–æ–¥—Å–∫–∞–∑–∫–∞ –≤—ã–¥–∞–Ω–∞ –¥–ª—è {username}")
    else:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏ –∏–≥—Ä—É —Å /start_rang!")

async def settings(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    keyboard = [[InlineKeyboardButton("–í–µ—Å—ë–ª—ã–π —Å—Ç–∏–ª—å", callback_data='style_fun'),
                 InlineKeyboardButton("–§–æ—Ä–º–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å", callback_data='style_formal')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å —Å–æ–æ–±—â–µ–Ω–∏–π:", reply_markup=reply_markup)
    logger.info("–ö–æ–º–∞–Ω–¥–∞ /settings –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")

async def settings_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    style = query.data.split('_')[1]
    user_id = query.effective_user.id
    username = query.effective_user.username if query.effective_user.username else str(user_id)
    context.user_data[f'style_{username}'] = style
    await query.message.reply_text(f"–°—Ç–∏–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {style}!")
    logger.info(f"–°—Ç–∏–ª—å {style} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è {username}")

# –ú–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏—è
async def promo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    chance = random.random()
    if chance < 0.1:
        discount = "15%"
        token = f"Token-{random.randint(1000, 9999)} {discount}"
    elif chance < 0.3:
        discount = "10%"
        token = f"Token-{random.randint(1000, 9999)} {discount}"
    else:
        discount = "5%"
        token = f"Token-{random.randint(1000, 9999)} {discount}"
    msg = f"üéâ –ê–∫—Ü–∏—è! –ë—É—Å—Ç –º–∞–∫—Å —Ä–∞–Ω–≥–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π {discount} –¥–æ 10 –∏—é–Ω—è 2025! –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–∫–µ–Ω: {token}!"
    await update.message.reply_text(msg)
    logger.info("–ö–æ–º–∞–Ω–¥–∞ /promo –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")

async def invite(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    username = update.effective_user.username if update.effective_user.username else str(user_id)
    referral_link = f"https://t.me/{context.bot.username}?start={username}"
    await update.message.reply_text(f"–ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–≥–∞ –ø–æ —Å—Å—ã–ª–∫–µ: {referral_link}\n–ó–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞ –ø–æ–ª—É—á–∏ 5% —Å–∫–∏–¥–∫—É!")
    update_user(context, user_id, username)
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /invite –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –¥–ª—è {username}")

# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
async def feedback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if context.args:
        feedback_text = " ".join(context.args)
        await context.bot.send_message(chat_id=ADMIN_USERNAME, text=f"–û—Ç–∑—ã–≤ –æ—Ç {update.effective_user.username}: {feedback_text}")
        await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! –û–Ω –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –æ—Ç–∑—ã–≤ –ø–æ—Å–ª–µ /feedback (–Ω–∞–ø—Ä–∏–º–µ—Ä, /feedback –û—Ç–ª–∏—á–Ω—ã–π –±–æ—Ç!).")
    logger.info("–ö–æ–º–∞–Ω–¥–∞ /feedback –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")

async def subscribe(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    username = update.effective_user.username if update.effective_user.username else str(user_id)
    update_user(context, user_id, username, subscribe=True)
    await update.message.reply_text("–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!")
    logger.info(f"–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è {username}")

async def unsubscribe(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    username = update.effective_user.username if update.effective_user.username else str(user_id)
    conn = sqlite3.connect('bot_data.db')
    c = conn.cursor()
    c.execute("UPDATE users SET subscribed = 0 WHERE username = ?", (username,))
    conn.commit()
    conn.close()
    await update.message.reply_text("–í—ã –æ—Ç–ø–∏—Å–∞–Ω—ã –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π!")
    logger.info(f"–û—Ç–ø–∏—Å–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –¥–ª—è {username}")

# –ò–≥—Ä–æ–≤—ã–µ —É–ª—É—á—à–µ–Ω–∏—è
async def guess_cups(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if context.user_data.get(f'played_cups_{update.effective_user.username or update.effective_user.id}'):
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—ã —É–∂–µ –ø—ã—Ç–∞–ª–∏ —É–¥–∞—á—É –≤ —ç—Ç–æ–π –∏–≥—Ä–µ!")
        return
    correct_cups = random.randint(0, 1000)
    context.user_data['correct_cups'] = correct_cups
    await update.message.reply_text("–£–≥–∞–¥–∞–π –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–±–∫–æ–≤ (0-1000)! –ù–∞–ø–∏—à–∏ —á–∏—Å–ª–æ.")
    context.user_data['game_cups_active'] = True
    logger.info(f"–ò–≥—Ä–∞ '–£–≥–∞–¥–∞–π –∫—É–±–∫–∏' –Ω–∞—á–∞—Ç–∞. –ó–∞–≥–∞–¥–∞–Ω—ã –∫—É–±–∫–∏: {correct_cups}")

async def handle_cups(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if context.user_data.get('game_cups_active'):
        try:
            user_guess = int(update.message.text)
            correct_cups = context.user_data['correct_cups']
            result = abs(user_guess - correct_cups) < 50
            if result:
                token_number = random.randint(1000, 9999)
                discount_token = f"Token-{token_number} 5%"
                discount_message = f"\nüéÅ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã —É–≥–∞–¥–∞–ª –∏ –ø–æ–ª—É—á–∏–ª 5% —Å–∫–∏–¥–∫—É! –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–∫–µ–Ω: {discount_token}"
                update_user(context, update.effective_user.id, update.effective_user.username or str(update.effective_user.id), played=True, win=True)
                add_achievement(context, update.effective_user.username or str(update.effective_user.id), "Cups Master")
            else:
                discount_message = ""
            response = (
                f"–¢–≤–æ–π –æ—Ç–≤–µ—Ç: {user_guess}\n"
                f"–ó–∞–≥–∞–¥–∞–Ω–Ω—ã–µ –∫—É–±–∫–∏: {correct_cups}\n"
                f"{'–û—Ç–ª–∏—á–Ω–æ! –¢—ã –±–ª–∏–∑–∫–æ!' if result else '–ù–µ —É–≥–∞–¥–∞–ª, –ø–æ–ø—Ä–æ–±—É–π –≤ –¥—Ä—É–≥–æ–π –∏–≥—Ä–µ!'}{discount_message}"
            )
            await update.message.reply_text(response)
            context.user_data['game_cups_active'] = False
            context.user_data[f'played_cups_{update.effective_user.username or update.effective_user.id}'] = True
        except ValueError:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ!")
    else:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏ –∏–≥—Ä—É —Å /guess_cups!")

async def achievements(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    username = update.effective_user.username if update.effective_user.username else str(update.effective_user.id)
    conn = sqlite3.connect('bot_data.db')
    c = conn.cursor()
    c.execute("SELECT achievement FROM achievements WHERE username = ?", (username,))
    achievements_list = c.fetchall()
    conn.close()
    if achievements_list:
        msg = f"üèÖ –¢–≤–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è, {username}:\n" + "\n".join([a[0] for a in achievements_list])
    else:
        msg = f"–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π, {username}!"
    await update.message.reply_text(msg)
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /achievements –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –¥–ª—è {username}")

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    username = update.effective_user.username if update.effective_user.username else str(update.effective_user.id)
    conn = sqlite3.connect('bot_data.db')
    c = conn.cursor()
    c.execute("SELECT played, wins, invites FROM users WHERE username = ?", (username,))
    data = c.fetchone()
    conn.close()
    if data:
        played, wins, invites = data
        msg = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {username}:\n–ò–≥—Ä—ã: {played}\n–ü–æ–±–µ–¥—ã: {wins}\n–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: {invites}"
    else:
        msg = f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è {username} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!"
    await update.message.reply_text(msg)
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /stats –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –¥–ª—è {username}")

# –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —É–ª—É—á—à–µ–Ω–∏—è
async def send_error_to_admin(context, error_message):
    try:
        await context.bot.send_message(chat_id=ADMIN_USERNAME, text=f"–û—à–∏–±–∫–∞: {error_message}")
    except TelegramError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {e}")

async def check_services(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    subscribed_users = []
    conn = sqlite3.connect('bot_data.db')
    c = conn.cursor()
    c.execute("SELECT username FROM users WHERE subscribed = 1")
    subscribed_users = [row[0] for row in c.fetchall()]
    conn.close()
    if subscribed_users:
        msg = "üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª—É–≥: –≤—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ! –ù–æ–≤—ã–µ —É—Å–ª—É–≥–∏ —Å–∫–æ—Ä–æ –Ω–∞ https://funpay.com/users/15119175"
        for user in subscribed_users:
            await context.bot.send_message(chat_id=user, text=msg)
    await asyncio.sleep(86400)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑ –≤ –¥–µ–Ω—å

# –ó–∞–ø—É—Å–∫
async def main() -> None:
    try:
        init_db()
        application = Application.builder().token(TOKEN).build()
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("start_rang", start_rang))
        application.add_handler(CommandHandler("leaderboard", leaderboard))
        application.add_handler(CommandHandler("hint", hint))
        application.add_handler(CommandHandler("settings", settings))
        application.add_handler(CommandHandler("promo", promo))
        application.add_handler(CommandHandler("invite", invite))
        application.add_handler(CommandHandler("feedback", feedback))
        application.add_handler(CommandHandler("subscribe", subscribe))
        application.add_handler(CommandHandler("unsubscribe", unsubscribe))
        application.add_handler(CommandHandler("guess_cups", guess_cups))
        application.add_handler(CommandHandler("achievements", achievements))
        application.add_handler(CommandHandler("stats", stats))
        application.add_handler(CommandHandler("paid", paid))
        application.add_handler(CallbackQueryHandler(button_callback))
        application.add_handler(CallbackQueryHandler(settings_callback, pattern='^style_'))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_guess))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND & filters.Regex(r'^\d+$'), handle_cups))
        await application.initialize()
        await application.start()
        await application.updater.start_polling(allowed_updates=Update.ALL_TYPES)
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")

        port = int(os.getenv("PORT", 10000))
        asyncio.create_task(asyncio.to_thread(lambda: app.run(host='0.0.0.0', port=port)))
        asyncio.create_task(check_services(None, application))

        try:
            while True:
                await asyncio.sleep(3600)
        except KeyboardInterrupt:
            logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç...")
            await application.updater.stop()
            await application.stop()
            await application.shutdown()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        await send_error_to_admin(application, f"Startup Error: {e}")

if __name__ == "__main__":
    asyncio.run(main())