import logging
import os
import asyncio
import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, ContextTypes, filters
from telegram.error import TelegramError
from flask import Flask, request

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∞
TOKEN = os.getenv("TOKEN", "7833966397:AAEwA91PbqzuYberVdNwF2bATaWsZD_055U")
ADMIN_USERNAME = "@oqoscode"
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID", "1254694557")

# –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤, –ª–∏–≥–∏, —Ü–≤–µ—Ç–∞, —à—Ä–∏—Ñ—Ç—ã
PRODUCTS = [
    {"name": "–ë—É—Å—Ç –º–∞–∫—Å —Ä–∞–Ω–≥–∞", "price": "200 —Ä—É–±", "image": "https://imgur.com/aX1QifJ"},
    {"name": "–ë—É—Å—Ç –º–∏—Ñ–∏–∫ –ª–∏–≥–∏", "price": "200 —Ä—É–±", "image": "https://imgur.com/r6xHSuB"},
    {"name": "–ë—É—Å—Ç –∫—É–±–∫–∏ –æ—Ç 0 –¥–æ 500 –∏ –æ—Ç 500 –¥–æ 1000 –∫—É–±–∫–æ–≤", "price": "–æ—Ç 100 —Ä—É–±–ª–µ–π –¥–æ 150 —Ä—É–±–ª–µ–π (—Ü–µ–Ω–∞ –¥–æ–≥–æ–≤–æ—Ä–Ω–∞—è)",
     "image": "https://imgur.com/x9YixzM"},
    {"name": "–ë—É—Å—Ç –∫–≤–µ—Å—Ç–æ–≤", "price": "150 —Ä—É–±", "image": "https://imgur.com/qIwBeF5"},
    {"name": "–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–≤–æ—é —É—Å–ª—É–≥—É", "price": "—Ü–µ–Ω—É –æ–±–≥–æ–≤–æ—Ä–∏–º", "image": "https://via.placeholder.com/150"}
]

LEAGUES = ["–ë—Ä–æ–Ω–∑–∞", "–°–µ—Ä–µ–±—Ä–æ", "–ó–æ–ª–æ—Ç–æ", "–ê–ª–º–∞–∑", "–ú–∏—Ñ–∏–∫"]
COMMENTS = {
    "win": ["–û—Ç–ª–∏—á–Ω–∞—è –∏–Ω—Ç—É–∏—Ü–∏—è! üéâ –¢—ã —É–≥–∞–¥–∞–ª –ª–∏–≥—É!", "–¢—ã –º–∞—Å—Ç–µ—Ä –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π! üí™", "–ü–æ—Ç—Ä—è—Å–∞—é—â–µ! –¢—ã –ø–æ–ø–∞–ª –≤ —Ü–µ–ª—å! üòé"],
    "lose": ["–£–≤—ã, –Ω–µ —É–≥–∞–¥–∞–ª! üòÇ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É —Ç–µ–±—è –±—ã–ª–∞ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞!",
             "–ü–æ—á—Ç–∏ –ø–æ–ª—É—á–∏–ª–æ—Å—å! üòÖ –ù–æ —É —Ç–µ–±—è –±—ã–ª–∞ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞!",
             "–ù–µ –ø–æ–≤–µ–∑–ª–æ –Ω–∞ —ç—Ç–æ—Ç —Ä–∞–∑! –£ —Ç–µ–±—è –±—ã–ª–∞ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞!"]
}

COLORS = {
    "red": "üî¥",
    "blue": "üîµ",
    "green": "üü¢",
    "yellow": "üü°",
    "purple": "üü£",
    "orange": "üü†"
}

FONTS = {
    "normal": lambda x: x,
    "bold": lambda x: f"<b>{x}</b>",
    "italic": lambda x: f"<i>{x}</i>",
    "monospace": lambda x: f"<code>{x}</code>",
    "emoji": lambda x: f"{x} ‚ú®",
    "fancy": lambda x: "".join(chr(ord(c) + 0x1D400) if c.isalpha() else c for c in x)
}


# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
async def notify_admin(context, message):
    try:
        if ADMIN_CHAT_ID:
            await context.bot.send_message(chat_id=int(ADMIN_CHAT_ID), text=message)
        elif ADMIN_USERNAME:
            await context.bot.send_message(chat_id=ADMIN_USERNAME, text=message)
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {message}")
    except TelegramError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç {update.effective_user.id}")
    keyboard = [
        [InlineKeyboardButton("–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤", callback_data='catalog')],
        [InlineKeyboardButton("–ò–≥—Ä–∞: –£–≥–∞–¥–∞–π –ª–∏–≥—É", callback_data='start_rang')],
        [InlineKeyboardButton("–ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data='settings')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    welcome_message = apply_style(
        "–ü—Ä–∏–≤–µ—Ç! –¢—ã –ø–æ–ø–∞–ª –≤ –º–æ–µ–≥–æ –±–æ—Ç–∞! üòé\n–í —ç—Ç–æ–º –±–æ—Ç–µ —Ç—ã –º–æ–∂–µ—à—å –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –º–æ–∏–º–∏ —É—Å–ª—É–≥–∞–º–∏.\n–í—Å–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç —Å—Ç—Ä–æ–≥–æ –ª–∏—á–Ω–æ —á–µ—Ä–µ–∑ –º–µ–Ω—è.\n–ù–∞–ø–∏—à–∏ –º–Ω–µ, –µ—Å–ª–∏ —Ç–µ–±–µ —á—Ç–æ-—Ç–æ –ø—Ä–∏–≥–ª—è–Ω–µ—Ç—Å—è!",
        context.user_data, update.effective_user.id
    )
    await update.message.reply_text(welcome_message, reply_markup=reply_markup, parse_mode='HTML')
    logger.info("–ö–æ–º–∞–Ω–¥–∞ /start –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")


async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    logger.info(f"–ü–æ–ª—É—á–µ–Ω callback: {query.data} –æ—Ç {query.from_user.id}")
    await query.answer()
    try:
        if query.data == 'catalog':
            await query.message.reply_text("üìã –ú–æ–∏ —É—Å–ª—É–≥–∏:", parse_mode='HTML')
            for i, product in enumerate(PRODUCTS, 1):
                message = apply_style(f"{i}. {product['name']} - {product['price']}", context.user_data,
                                      query.from_user.id)
                keyboard = [[InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å", callback_data=f"product_{i}")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                try:
                    await query.message.reply_photo(photo=product['image'], caption=message, reply_markup=reply_markup,
                                                    parse_mode='HTML')
                except TelegramError as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ –¥–ª—è {product['name']}: {e}")
                    await query.message.reply_text(message, reply_markup=reply_markup, parse_mode='HTML')

        elif query.data.startswith('product_'):
            product_index = int(query.data.split('_')[1]) - 1
            if 0 <= product_index < len(PRODUCTS):
                product = PRODUCTS[product_index]
                user = query.from_user
                username = user.id
                requisites_message = apply_style(
                    f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {product['name']} - {product['price']}\n\n–†–µ–∫–≤–∏–∑–∏—Ç—ã:\n"
                    f"@oqoscode (–ø–∏—à–∏—Ç–µ —Ç–æ–ª—å–∫–æ –ø–æ –¥–µ–ª—É, –ø—Ä–æ—à—É –Ω–µ —Å–ø–∞–º–∏—Ç—å, –º–æ–≥—É –Ω–µ –æ—Ç–≤–µ—á–∞—Ç—å)\n"
                    "–°—Å—ã–ª–∫–∞ –Ω–∞ FunPay: https://funpay.com/users/15119175\n"
                    "–°—Å—ã–ª–∫–∞ –Ω–∞ https://www.donationalerts.com/r/makarovbyshop\n"
                    "(–ø—Ä–æ—à—É –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç–æ—á–Ω—É—é —Å—É–º–º—É –∏ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ—è—Å–Ω–∏—Ç–µ –∑–∞ —á—Ç–æ –ø–ª–∞—Ç–∏—Ç–µ, "
                    "—Ç–∞–∫–∂–µ –Ω–µ –æ–ø–ª–∞—á–∏–≤–∞–π—Ç–µ —Å—Ä–∞–∑—É, —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Å–æ –º–Ω–æ–π)\n"
                    "–¢–∞–∫–∂–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –≤–µ—Ä–Ω—É –¥–µ–Ω—å–≥–∏, –µ—Å–ª–∏ –Ω–µ —Å–º–æ–≥—É –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–∫–∞–∑",
                    context.user_data, user.id
                )
                await query.message.reply_text(requisites_message, parse_mode='HTML')
                await notify_admin(context,
                                   f"üîî –ù–æ–≤—ã–π –∑–∞–∫–∞–∑! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –≤—ã–±—Ä–∞–ª: {product['name']} - {product['price']}. –ü—Ä–æ–≤–µ—Ä—å!")
                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É –æ –≤—ã–±–æ—Ä–µ {product['name']} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {username}")
            else:
                await query.message.reply_text("–û—à–∏–±–∫–∞: –≤—ã–±—Ä–∞–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä.", parse_mode='HTML')
                logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–Ω–¥–µ–∫—Å –ø—Ä–æ–¥—É–∫—Ç–∞: {product_index}")

        elif query.data == 'start_rang':
            await start_rang(query, context)

        elif query.data == 'settings':
            await settings(query, context)

        elif query.data.startswith('color_'):
            color = query.data.split('_')[1]
            user_id = query.from_user.id
            context.user_data[f'color_{user_id}'] = color
            logger.info(f"–°–æ—Ö—Ä–∞–Ω—ë–Ω —Ü–≤–µ—Ç {color} –¥–ª—è user_id {user_id}")
            await query.message.reply_text(apply_style("–¶–≤–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∏–∑–º–µ–Ω—ë–Ω!", context.user_data, user_id),
                                           parse_mode='HTML')

        elif query.data.startswith('font_'):
            font = query.data.split('_')[1]
            user_id = query.from_user.id
            context.user_data[f'font_{user_id}'] = font
            logger.info(f"–°–æ—Ö—Ä–∞–Ω—ë–Ω —à—Ä–∏—Ñ—Ç {font} –¥–ª—è user_id {user_id}")
            await query.message.reply_text(apply_style("–®—Ä–∏—Ñ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∏–∑–º–µ–Ω—ë–Ω!", context.user_data, user_id),
                                           parse_mode='HTML')

    except TelegramError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API: {e}")
        await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", parse_mode='HTML')
        await notify_admin(context, f"Telegram API Error: {e}")


async def start_rang(query, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start_rang –æ—Ç {query.from_user.id}")
    user_id = query.from_user.id
    username = query.from_user.username if query.from_user.username else str(user_id)
    chat_id = query.message.chat.id
    if context.user_data.get(f'played_{user_id}'):
        await context.bot.send_message(chat_id=chat_id, text=apply_style(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –≤—ã —É–∂–µ –ø—ã—Ç–∞–ª–∏ —É–¥–∞—á—É! –£ –≤–∞—Å –±—ã–ª–∞ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞.", context.user_data, user_id),
                                       parse_mode='HTML')
        return
    context.user_data['correct_league'] = random.choice(LEAGUES)
    await context.bot.send_message(
        chat_id=chat_id,
        text=apply_style(
            "–ü—Ä–∏–≤–µ—Ç –¥–∞–≤–∞–π —Å—ã–≥—Ä–∞–µ–º –≤ –∏–≥—Ä—É —É–≥–∞–¥–∞–π –ª–∏–≥—É, —Ç—ã –¥–æ–ª–∂–µ–Ω —É–≥–∞–¥–∞—Ç—å –ª–∏–≥—É –∫–æ—Ç–æ—Ä—É—é —è –∑–∞–≥–∞–¥–∞—é –∏ –ø–æ–ª—É—á–∏—à—å —Å–∫–∏–¥–∫—É, "
            "–Ω–∞–ø–∏—à–∏ —Å–≤–æ—é –¥–æ–≥–∞–¥–∫—É –∏ –ø–æ–ª—É—á–∏ —Å–∫–∏–¥–∫—É! (–í–∞—Ä–∏–∞–Ω—Ç—ã: –ë—Ä–æ–Ω–∑–∞, –°–µ—Ä–µ–±—Ä–æ, –ó–æ–ª–æ—Ç–æ, –ê–ª–º–∞–∑, –ú–∏—Ñ–∏–∫) "
            "–£ —Ç–µ–±—è —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞!",
            context.user_data, user_id
        ),
        parse_mode='HTML'
    )
    context.user_data['game_active'] = True
    logger.info(f"–ò–≥—Ä–∞ '–£–≥–∞–¥–∞–π –ª–∏–≥—É' –Ω–∞—á–∞—Ç–∞ –¥–ª—è {username}. –ó–∞–≥–∞–¥–∞–Ω–∞ –ª–∏–≥–∞: {context.user_data['correct_league']}")


async def handle_guess(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –∏–≥—Ä—É –æ—Ç {update.effective_user.id}: {update.message.text}")
    if context.user_data.get('game_active'):
        user_id = update.effective_user.id
        username = update.effective_user.username if update.effective_user.username else str(user_id)
        user_guess = update.message.text.strip().capitalize()
        correct_league = context.user_data.get('correct_league')
        if correct_league is None:
            logger.error(f"correct_league –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω –¥–ª—è {username}")
            await update.message.reply_text(
                apply_style("–ò–≥—Ä–∞ –Ω–µ –±—ã–ª–∞ –Ω–∞—á–∞—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ —Å /start_rang.", context.user_data, user_id),
                parse_mode='HTML')
            return
        result = user_guess == correct_league
        discount_message = ""
        if result:
            token_number = random.randint(1000, 9999)
            discount_token = f"Token-{token_number} 5%"
            discount_message = f"\nüéÅ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã —É–≥–∞–¥–∞–ª –∏ –ø–æ–ª—É—á–∏–ª 5% —Å–∫–∏–¥–∫—É! –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–∫–µ–Ω: {discount_token} –ø—Ä–∏ –∑–∞–∫–∞–∑–µ!"
        response = apply_style(
            f"–¢–≤–æ–π –æ—Ç–≤–µ—Ç: {user_guess}\n–ó–∞–≥–∞–¥–∞–Ω–Ω–∞—è –ª–∏–≥–∞: {correct_league}\n"
            f"{random.choice(COMMENTS['win']) if result else random.choice(COMMENTS['lose'])}"
            f"{discount_message}",
            context.user_data, user_id
        )
        await update.message.reply_text(response, parse_mode='HTML')
        context.user_data['game_active'] = False
        context.user_data[f'played_{user_id}'] = True
        logger.info(f"–ò–≥—Ä–∞ '–£–≥–∞–¥–∞–π –ª–∏–≥—É' –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è {username}. –£–≥–∞–¥–∞–ª: {result}, –¢–æ–∫–µ–Ω: {discount_message}")
    else:
        await update.message.reply_text(
            apply_style("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –≤—ã —É–∂–µ –ø—ã—Ç–∞–ª–∏ —É–¥–∞—á—É! –£ –≤–∞—Å –±—ã–ª–∞ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞.", context.user_data,
                        user_id), parse_mode='HTML')


async def settings(query, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /settings –æ—Ç {query.from_user.id}")
    color_buttons = []
    for color_key in COLORS.keys():
        color_buttons.append(
            InlineKeyboardButton(f"{COLORS[color_key]} {color_key}", callback_data=f"color_{color_key}"))
    color_rows = [color_buttons[i:i + 2] for i in range(0, len(color_buttons), 2)]

    font_buttons = []
    for font_key in FONTS.keys():
        font_buttons.append(InlineKeyboardButton(f"–®—Ä–∏—Ñ—Ç: {font_key}", callback_data=f"font_{font_key}"))
    font_rows = [font_buttons[i:i + 2] for i in range(0, len(font_buttons), 2)]

    settings_keyboard = color_rows + font_rows
    reply_markup = InlineKeyboardMarkup(settings_keyboard)
    await context.bot.send_message(
        chat_id=query.message.chat.id,
        text=apply_style("–í—ã–±–µ—Ä–∏ —Ü–≤–µ—Ç –∏–ª–∏ —à—Ä–∏—Ñ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:", context.user_data, query.from_user.id),
        reply_markup=reply_markup,
        parse_mode='HTML'
    )
    logger.info("–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–∫–∞–∑–∞–Ω–æ")


def apply_style(text, user_data, user_id):
    color = user_data.get(f'color_{user_id}', 'red')
    font_key = user_data.get(f'font_{user_id}', 'normal')
    logger.info(f"–ü—Ä–∏–º–µ–Ω—ë–Ω —Ü–≤–µ—Ç: {color}, —à—Ä–∏—Ñ—Ç: {font_key} –¥–ª—è user_id {user_id}")
    color_emoji = COLORS.get(color, COLORS['red'])
    font_func = FONTS.get(font_key, FONTS['normal'])
    styled_text = f"{color_emoji} {font_func(text)}"
    return styled_text


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Flask
app = Flask(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
application = Application.builder().token(TOKEN).build()
application.initialize()  # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
application.add_handler(CommandHandler("start", start))
application.add_handler(CallbackQueryHandler(button_callback))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_guess))


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞
@app.route('/webhook', methods=['POST'])
async def webhook():
    logger.info("–ü–æ–ª—É—á–µ–Ω POST-–∑–∞–ø—Ä–æ—Å –Ω–∞ /webhook")
    data = request.get_json()
    logger.info(f"–î–∞–Ω–Ω—ã–µ –æ—Ç Telegram: {data}")
    update = Update.de_json(data, application.bot)
    await application.process_update(update)
    logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    return 'OK', 200


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞ —Å URL –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    WEBHOOK_URL = os.getenv("WEBHOOK_URL")
    if not WEBHOOK_URL:
        logger.error("WEBHOOK_URL –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–¥–∞—Ç—å WEBHOOK_URL –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
    logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞: {WEBHOOK_URL}")
    asyncio.run(application.bot.set_webhook(url=WEBHOOK_URL))

    # –ó–∞–ø—É—Å–∫ Flask —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º –ø–æ—Ä—Ç–æ–º
    port = int(os.getenv("PORT", 10000))
    app.run(host='0.0.0.0', port=port)