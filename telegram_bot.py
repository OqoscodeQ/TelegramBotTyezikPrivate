import logging
import os
import signal
import asyncio
import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, ContextTypes, filters
from telegram.error import TelegramError, Conflict

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = os.getenv("TOKEN", "7996047867:AAG0diMuw5uhqGUVSYNcUPAst8hm2R_G47Q")

# –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Å –ø—Ä—è–º—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
PRODUCTS = [
    {"name": "–ë—É—Å—Ç –º–∞–∫—Å —Ä–∞–Ω–≥–∞", "price": "200 —Ä—É–±", "image": "https://imgur.com/aX1QifJ"},
    {"name": "–ë—É—Å—Ç –º–∏—Ñ–∏–∫ –ª–∏–≥–∏", "price": "200 —Ä—É–±",
     "image": "https://imgur.com/r6xHSuB"},
    {"name": "–ë—É—Å—Ç –∫—É–±–∫–∏ –æ—Ç 0 –¥–æ 500 –∏ –æ—Ç 500 –¥–æ 1000 –∫—É–±–∫–æ–≤", "price": "–æ—Ç 100 —Ä—É–±–ª–µ–π –¥–æ 150 —Ä—É–±–ª–µ–π (—Ü–µ–Ω–∞ –¥–æ–≥–æ–≤–æ—Ä–Ω–∞—è)",
     "image": "https://imgur.com/x9YixzM"},
    {"name": "–ë—É—Å—Ç –∫–≤–µ—Å—Ç–æ–≤", "price": "150 —Ä—É–±", "image": "https://imgur.com/qIwBeF5"},
    {"name": "–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–≤–æ—é —É—Å–ª—É–≥—É", "price": "—Ü–µ–Ω—É –æ–±–≥–æ–≤–æ—Ä–∏–º",
     "image": "https://via.placeholder.com/150?text=Custom+Service"}
]

# –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ª–∏–≥ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
LEAGUES = ["–ë—Ä–æ–Ω–∑–∞", "–°–µ—Ä–µ–±—Ä–æ", "–ó–æ–ª–æ—Ç–æ", "–ê–ª–º–∞–∑", "–ú–∏—Ñ–∏–∫"]
COMMENTS = {
    "win": [
        "–û—Ç–ª–∏—á–Ω–∞—è –∏–Ω—Ç—É–∏—Ü–∏—è! üéâ –¢—ã —É–≥–∞–¥–∞–ª –ª–∏–≥—É!",
        "–¢—ã –º–∞—Å—Ç–µ—Ä –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π! üí™",
        "–ü–æ—Ç—Ä—è—Å–∞—é—â–µ! –¢—ã –ø–æ–ø–∞–ª –≤ —Ü–µ–ª—å! üòé"
    ],
    "lose": [
        "–£–≤—ã, –Ω–µ —É–≥–∞–¥–∞–ª! üòÇ –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –≤ –Ω–æ–≤–æ–π –∏–≥—Ä–µ!",
        "–ü–æ—á—Ç–∏ –ø–æ–ª—É—á–∏–ª–æ—Å—å! üòÖ –î–∞–≤–∞–π –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑!",
        "–ù–µ –ø–æ–≤–µ–∑–ª–æ –Ω–∞ —ç—Ç–æ—Ç —Ä–∞–∑! –ù–æ —Ç—ã –º–æ–ª–æ–¥–µ—Ü! –ù–∞—á–Ω–∏ –Ω–æ–≤—É—é –∏–≥—Ä—É!"
    ]
}


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    keyboard = [
        [InlineKeyboardButton("–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤", callback_data='catalog')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    welcome_message = (
        "–ü—Ä–∏–≤–µ—Ç! –¢—ã –ø–æ–ø–∞–ª –≤ –º–æ–µ–≥–æ –±–æ—Ç–∞! üòé\n"
        "–í —ç—Ç–æ–º –±–æ—Ç–µ —Ç—ã –º–æ–∂–µ—à—å –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –º–æ–∏–º–∏ —É—Å–ª—É–≥–∞–º–∏.\n"
        "–í—Å–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç —Å—Ç—Ä–æ–≥–æ –ª–∏—á–Ω–æ —á–µ—Ä–µ–∑ –º–µ–Ω—è.\n"
        "–ù–∞–ø–∏—à–∏ –º–Ω–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –µ—Å–ª–∏ —Ç–µ–±–µ —á—Ç–æ-—Ç–æ –ø—Ä–∏–≥–ª—è–Ω–µ—Ç—Å—è!"
    )
    await update.message.reply_text(welcome_message, reply_markup=reply_markup)
    logger.info("–ö–æ–º–∞–Ω–¥–∞ /start –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")


async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    logger.info(f"–ü–æ–ª—É—á–µ–Ω callback: {query.data}")

    try:
        if query.data == 'catalog':
            await query.message.reply_text("üìã –ú–æ–∏ —É—Å–ª—É–≥–∏:")
            for i, product in enumerate(PRODUCTS, 1):
                message = f"{i}. {product['name']} - {product['price']}"
                keyboard = [[InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å", callback_data=f"product_{i}")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                try:
                    await query.message.reply_photo(
                        photo=product['image'],
                        caption=message,
                        reply_markup=reply_markup
                    )
                except TelegramError as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ –¥–ª—è {product['name']}: {e}")
                    await query.message.reply_text(message, reply_markup=reply_markup)

        elif query.data.startswith('product_'):
            try:
                product_index = int(query.data.split('_')[1]) - 1
                if 0 <= product_index < len(PRODUCTS):
                    product = PRODUCTS[product_index]
                    requisites_message = (
                        f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {product['name']} - {product['price']}\n\n"
                        "–†–µ–∫–≤–∏–∑–∏—Ç—ã:\n"
                        "@Tyezik (–ø–∏—à–∏—Ç–µ —Ç–æ–ª—å–∫–æ –ø–æ –¥–µ–ª—É, –ø—Ä–æ—à—É –Ω–µ —Å–ø–∞–º–∏—Ç—å, –º–æ–≥—É –Ω–µ –æ—Ç–≤–µ—á–∞—Ç—å)\n"
                        "–°—Å—ã–ª–∫–∞ –Ω–∞ https://www.donationalerts.com/r/makarovbyshop\n"
                        "(–ø—Ä–æ—à—É –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç–æ—á–Ω—É—é —Å—É–º–º—É –∏ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ—è—Å–Ω–∏—Ç–µ –∑–∞ —á—Ç–æ –ø–ª–∞—Ç–∏—Ç–µ, "
                        "—Ç–∞–∫–∂–µ –Ω–µ –æ–ø–ª–∞—á–∏–≤–∞–π—Ç–µ —Å—Ä–∞–∑—É, —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Å–æ –º–Ω–æ–π)\n"
                        "–¢–∞–∫–∂–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –≤–µ—Ä–Ω—É –¥–µ–Ω—å–≥–∏, –µ—Å–ª–∏ –Ω–µ —Å–º–æ–≥—É –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–∫–∞–∑\n\n"
                        "–•–æ—á–µ—à—å –≤—ã–∏–≥—Ä–∞—Ç—å —Å–∫–∏–¥–∫—É? –í–≤–µ–¥–∏ /start_rang –∏ —Å—ã–≥—Ä–∞–π –≤ '–£–≥–∞–¥–∞–π –ª–∏–≥—É'!"
                    )
                    await query.message.reply_text(requisites_message)
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ {product['name']}")
                else:
                    await query.message.reply_text("–û—à–∏–±–∫–∞: –≤—ã–±—Ä–∞–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä.")
                    logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–Ω–¥–µ–∫—Å –ø—Ä–æ–¥—É–∫—Ç–∞: {product_index}")
            except ValueError as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback_data {query.data}: {e}")
                await query.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–æ–≤–∞—Ä–∞.")

    except TelegramError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API: {e}")
        await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def start_rang(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start_rang –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã"""
    if context.user_data.get('game_active'):
        await update.message.reply_text(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –≤—ã —É–∂–µ –ø—ã—Ç–∞–ª–∏ —É–¥–∞—á—É! –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π.")
        return
    context.user_data['correct_league'] = random.choice(LEAGUES)  # –°–ª—É—á–∞–π–Ω–∞—è –ª–∏–≥–∞
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç –¥–∞–≤–∞–π —Å—ã–≥—Ä–∞–µ–º –≤ –∏–≥—Ä—É —É–≥–∞–¥–∞–π –ª–∏–≥—É, —Ç—ã –¥–æ–ª–∂–µ–Ω —É–≥–∞–¥–∞—Ç—å –ª–∏–≥—É –∫–æ—Ç–æ—Ä—É—é —è –∑–∞–≥–∞–¥–∞—é –∏ –ø–æ–ª—É—á–∏—à—å —Å–∫–∏–¥–∫—É, "
        "–Ω–∞–ø–∏—à–∏ —Å–≤–æ—é –¥–æ–≥–∞–¥–∫—É –∏ –ø–æ–ª—É—á–∏ —Å–∫–∏–¥–∫—É! (–í–∞—Ä–∏–∞–Ω—Ç—ã: –ë—Ä–æ–Ω–∑–∞, –°–µ—Ä–µ–±—Ä–æ, –ó–æ–ª–æ—Ç–æ, –ê–ª–º–∞–∑, –ú–∏—Ñ–∏–∫)"
    )
    context.user_data['game_active'] = True
    logger.info(f"–ò–≥—Ä–∞ '–£–≥–∞–¥–∞–π –ª–∏–≥—É' –Ω–∞—á–∞—Ç–∞. –ó–∞–≥–∞–¥–∞–Ω–∞ –ª–∏–≥–∞: {context.user_data['correct_league']}")


async def handle_guess(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∏–≥—Ä—ã '–£–≥–∞–¥–∞–π –ª–∏–≥—É'"""
    if context.user_data.get('game_active'):
        user_guess = update.message.text.strip().capitalize()
        correct_league = context.user_data['correct_league']
        result = user_guess == correct_league

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ —Å–∫–∏–¥–∫–∏ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –æ—Ç–≤–µ—Ç–µ
        discount_message = ""
        if result:
            token_number = random.randint(1000, 9999)
            discount_token = f"Token-{token_number} 5%"
            discount_message = f"\nüéÅ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã —É–≥–∞–¥–∞–ª –∏ –ø–æ–ª—É—á–∏–ª 5% —Å–∫–∏–¥–∫—É! –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–∫–µ–Ω: {discount_token} –ø—Ä–∏ –∑–∞–∫–∞–∑–µ!"

        response = (
            f"–¢–≤–æ–π –æ—Ç–≤–µ—Ç: {user_guess}\n"
            f"–ó–∞–≥–∞–¥–∞–Ω–Ω–∞—è –ª–∏–≥–∞: {correct_league}\n"
            f"{random.choice(COMMENTS['win']) if result else random.choice(COMMENTS['lose'])}"
            f"{discount_message}"
        )
        await update.message.reply_text(response)

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∏–≥—Ä—ã
        context.user_data['game_active'] = False
        logger.info(f"–ò–≥—Ä–∞ '–£–≥–∞–¥–∞–π –ª–∏–≥—É' –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£–≥–∞–¥–∞–ª: {result}, –¢–æ–∫–µ–Ω: {discount_message}")
    else:
        await update.message.reply_text(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –≤—ã —É–∂–µ –ø—ã—Ç–∞–ª–∏ —É–¥–∞—á—É! –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É –º–æ–∂–Ω–æ —Å –∫–æ–º–∞–Ω–¥—ã /start_rang.")


async def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        application = Application.builder().token(TOKEN).build()
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("start_rang", start_rang))
        application.add_handler(CallbackQueryHandler(button_callback))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_guess))
        await application.initialize()
        await application.start()
        await application.updater.start_polling(allowed_updates=Update.ALL_TYPES)
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")

        try:
            while True:
                await asyncio.sleep(3600)
        except KeyboardInterrupt:
            logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç...")
            await application.updater.stop()
            await application.stop()
            await application.shutdown()
    except Conflict as e:
        logger.error(f"–ö–æ–Ω—Ñ–ª–∏–∫—Ç —Å –¥—Ä—É–≥–∏–º —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–º –±–æ—Ç–∞: {e}. –£–±–µ–¥–∏—Å—å, —á—Ç–æ –∑–∞–ø—É—â–µ–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")


if __name__ == "__main__":
    asyncio.run(main())